CCS PCM C Compiler, Version 5.101, 43599               11-Thg1-23 13:47

               Filename:   G:\Ki_5\da_3\code\main.lst

               ROM used:   1705 words (21%)
                           Largest free fragment is 2048
               RAM used:   49 (13%) at main() level
                           69 (19%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3FD
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   06B
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  28
0054:  RETLW  0C
0055:  RETLW  01
0056:  RETLW  06
*
0081:  DATA C4,27
0082:  DATA A0,20
0083:  DATA 4E,10
0084:  DATA 33,00
0085:  DATA CE,23
0086:  DATA D5,2C
0087:  DATA 45,27
0088:  DATA CD,24
0089:  DATA 4E,24
008A:  DATA C4,27
008B:  DATA 41,27
008C:  DATA 48,00
008D:  DATA C8,2A
008E:  DATA 3A,10
008F:  DATA A5,3A
0090:  DATA AC,12
0091:  DATA 75,00
0092:  DATA D4,22
0093:  DATA 3A,10
0094:  DATA A5,3A
0095:  DATA AC,12
0096:  DATA 75,00
0097:  DATA 4B,10
0098:  DATA C4,27
0099:  DATA 43,10
009A:  DATA C4,2A
009B:  DATA CF,21
009C:  DATA A0,23
009D:  DATA 54,29
009E:  DATA 49,00
009F:  DATA C3,20
00A0:  DATA 49,10
00A1:  DATA C4,20
00A2:  DATA 54,10
00A3:  DATA 4E,22
00A4:  DATA A0,26
00A5:  DATA 41,2C
00A6:  DATA 00,01
00A7:  DATA C7,24
00A8:  DATA 41,10
00A9:  DATA 54,29
00AA:  DATA 49,1D
00AB:  DATA 25,32
00AC:  DATA 00,00
00AD:  DATA C3,20
00AE:  DATA 49,10
00AF:  DATA C4,20
00B0:  DATA 54,10
00B1:  DATA 4E,22
00B2:  DATA A0,26
00B3:  DATA 49,27
00B4:  DATA 00,01
00B5:  DATA C7,24
00B6:  DATA 41,10
00B7:  DATA 54,29
00B8:  DATA 49,1D
00B9:  DATA 25,32
00BA:  DATA 00,01
00BB:  DATA C3,20
00BC:  DATA 49,10
00BD:  DATA C4,20
00BE:  DATA 54,10
00BF:  DATA C8,2A
00C0:  DATA A0,26
00C1:  DATA 41,2C
00C2:  DATA 00,01
00C3:  DATA C7,24
00C4:  DATA 41,10
00C5:  DATA 54,29
00C6:  DATA 49,1D
00C7:  DATA 25,32
00C8:  DATA 00,01
00C9:  DATA C3,20
00CA:  DATA 49,10
00CB:  DATA C4,20
00CC:  DATA 54,10
00CD:  DATA C8,2A
00CE:  DATA A0,26
00CF:  DATA 49,27
00D0:  DATA 00,01
00D1:  DATA C7,24
00D2:  DATA 41,10
00D3:  DATA 54,29
00D4:  DATA 49,1D
00D5:  DATA 25,32
00D6:  DATA 00,00
*
0222:  MOVF   0B,W
0223:  MOVWF  4B
0224:  BCF    0B.7
0225:  BSF    03.5
0226:  BSF    03.6
0227:  BSF    0C.7
0228:  BSF    0C.0
0229:  NOP
022A:  NOP
022B:  BCF    03.5
022C:  BCF    03.6
022D:  BTFSC  4B.7
022E:  BSF    0B.7
022F:  BSF    03.6
0230:  MOVF   0C,W
0231:  ANDLW  7F
0232:  BTFSC  03.2
0233:  GOTO   276
0234:  BCF    03.6
0235:  MOVWF  4B
0236:  BSF    03.6
0237:  MOVF   0D,W
0238:  BCF    03.6
0239:  MOVWF  4C
023A:  BSF    03.6
023B:  MOVF   0F,W
023C:  BCF    03.6
023D:  MOVWF  4D
023E:  MOVF   4B,W
023F:  MOVWF  51
0240:  CALL   1FE
0241:  MOVF   4C,W
0242:  BSF    03.6
0243:  MOVWF  0D
0244:  BCF    03.6
0245:  MOVF   4D,W
0246:  BSF    03.6
0247:  MOVWF  0F
0248:  BCF    03.6
0249:  MOVF   0B,W
024A:  MOVWF  4E
024B:  BCF    0B.7
024C:  BSF    03.5
024D:  BSF    03.6
024E:  BSF    0C.7
024F:  BSF    0C.0
0250:  NOP
0251:  NOP
0252:  BCF    03.5
0253:  BCF    03.6
0254:  BTFSC  4E.7
0255:  BSF    0B.7
0256:  BSF    03.6
0257:  RLF    0C,W
0258:  RLF    0E,W
0259:  ANDLW  7F
025A:  BTFSC  03.2
025B:  GOTO   276
025C:  BCF    03.6
025D:  MOVWF  4B
025E:  BSF    03.6
025F:  MOVF   0D,W
0260:  BCF    03.6
0261:  MOVWF  4C
0262:  BSF    03.6
0263:  MOVF   0F,W
0264:  BCF    03.6
0265:  MOVWF  4D
0266:  MOVF   4B,W
0267:  MOVWF  51
0268:  CALL   1FE
0269:  MOVF   4C,W
026A:  BSF    03.6
026B:  MOVWF  0D
026C:  BCF    03.6
026D:  MOVF   4D,W
026E:  BSF    03.6
026F:  MOVWF  0F
0270:  INCF   0D,F
0271:  BTFSC  03.2
0272:  INCF   0F,F
0273:  BCF    03.6
0274:  GOTO   222
0275:  BSF    03.6
0276:  BCF    03.6
0277:  RETURN
*
0280:  MOVF   31,W
0281:  MOVWF  04
0282:  BCF    03.7
0283:  BTFSC  32.0
0284:  BSF    03.7
0285:  MOVF   4F,W
0286:  MOVWF  00
0287:  INCF   04,F
0288:  CLRF   00
0289:  INCF   31,F
028A:  BTFSC  03.2
028B:  INCF   32,F
028C:  RETURN
028D:  MOVF   0B,W
028E:  MOVWF  4C
028F:  BCF    0B.7
0290:  BSF    03.5
0291:  BSF    03.6
0292:  BSF    0C.7
0293:  BSF    0C.0
0294:  NOP
0295:  NOP
0296:  BCF    03.5
0297:  BCF    03.6
0298:  BTFSC  4C.7
0299:  BSF    0B.7
029A:  BTFSC  03.0
029B:  GOTO   2C4
029C:  BSF    03.6
029D:  MOVF   0C,W
029E:  ANDLW  7F
029F:  BCF    03.6
02A0:  MOVWF  4C
02A1:  BSF    03.6
02A2:  MOVF   0D,W
02A3:  BCF    03.6
02A4:  MOVWF  4D
02A5:  BSF    03.6
02A6:  MOVF   0F,W
02A7:  BCF    03.6
02A8:  MOVWF  4E
02A9:  MOVF   4C,W
02AA:  MOVWF  4F
02AB:  CALL   280
02AC:  MOVF   4D,W
02AD:  BSF    03.6
02AE:  MOVWF  0D
02AF:  BCF    03.6
02B0:  MOVF   4E,W
02B1:  BSF    03.6
02B2:  MOVWF  0F
02B3:  BCF    03.6
02B4:  MOVF   0B,W
02B5:  MOVWF  4F
02B6:  BCF    0B.7
02B7:  BSF    03.5
02B8:  BSF    03.6
02B9:  BSF    0C.7
02BA:  BSF    0C.0
02BB:  NOP
02BC:  NOP
02BD:  BCF    03.5
02BE:  BCF    03.6
02BF:  BTFSC  4F.7
02C0:  BSF    0B.7
02C1:  DECFSZ 4B,F
02C2:  GOTO   2C4
02C3:  GOTO   2E3
02C4:  BSF    03.6
02C5:  RLF    0C,W
02C6:  RLF    0E,W
02C7:  ANDLW  7F
02C8:  BCF    03.6
02C9:  MOVWF  4C
02CA:  BSF    03.6
02CB:  MOVF   0D,W
02CC:  BCF    03.6
02CD:  MOVWF  4D
02CE:  BSF    03.6
02CF:  MOVF   0F,W
02D0:  BCF    03.6
02D1:  MOVWF  4E
02D2:  MOVF   4C,W
02D3:  MOVWF  4F
02D4:  CALL   280
02D5:  MOVF   4D,W
02D6:  BSF    03.6
02D7:  MOVWF  0D
02D8:  BCF    03.6
02D9:  MOVF   4E,W
02DA:  BSF    03.6
02DB:  MOVWF  0F
02DC:  INCF   0D,F
02DD:  BTFSC  03.2
02DE:  INCF   0F,F
02DF:  BCF    03.0
02E0:  BCF    03.6
02E1:  DECFSZ 4B,F
02E2:  GOTO   28D
02E3:  RETURN
02E4:  MOVF   52,W
02E5:  CLRF   78
02E6:  SUBWF  51,W
02E7:  BTFSC  03.0
02E8:  GOTO   2EC
02E9:  MOVF   51,W
02EA:  MOVWF  77
02EB:  GOTO   2F8
02EC:  CLRF   77
02ED:  MOVLW  08
02EE:  MOVWF  53
02EF:  RLF    51,F
02F0:  RLF    77,F
02F1:  MOVF   52,W
02F2:  SUBWF  77,W
02F3:  BTFSC  03.0
02F4:  MOVWF  77
02F5:  RLF    78,F
02F6:  DECFSZ 53,F
02F7:  GOTO   2EF
02F8:  RETURN
02F9:  MOVF   78,W
02FA:  MOVF   4B,W
02FB:  MOVWF  51
02FC:  MOVLW  64
02FD:  MOVWF  52
02FE:  CALL   2E4
02FF:  MOVF   77,W
0300:  MOVWF  4B
0301:  MOVF   78,W
0302:  MOVLW  30
0303:  BTFSS  03.2
0304:  GOTO   30C
0305:  BTFSS  4C.1
0306:  GOTO   313
0307:  BTFSC  4C.3
0308:  GOTO   313
0309:  BTFSC  4C.4
030A:  MOVLW  20
030B:  GOTO   30F
030C:  BCF    4C.3
030D:  BCF    4C.4
030E:  BSF    4C.0
030F:  ADDWF  78,F
0310:  MOVF   78,W
0311:  MOVWF  4F
0312:  CALL   280
0313:  MOVF   4B,W
0314:  MOVWF  51
0315:  MOVLW  0A
0316:  MOVWF  52
0317:  CALL   2E4
0318:  MOVF   77,W
0319:  MOVWF  4B
031A:  MOVF   78,W
031B:  MOVLW  30
031C:  BTFSS  03.2
031D:  GOTO   324
031E:  BTFSC  4C.3
031F:  GOTO   328
0320:  BTFSS  4C.0
0321:  GOTO   328
0322:  BTFSC  4C.4
0323:  MOVLW  20
0324:  ADDWF  78,F
0325:  MOVF   78,W
0326:  MOVWF  4F
0327:  CALL   280
0328:  MOVLW  30
0329:  ADDWF  4B,F
032A:  MOVF   4B,W
032B:  MOVWF  4F
032C:  CALL   280
032D:  RETURN
032E:  MOVF   00,F
032F:  BTFSC  03.2
0330:  GOTO   343
0331:  CLRF   4C
0332:  MOVF   04,W
0333:  MOVWF  4B
0334:  BCF    4C.0
0335:  BTFSC  03.7
0336:  BSF    4C.0
0337:  MOVF   00,W
0338:  MOVWF  51
0339:  CALL   1FE
033A:  MOVF   4B,W
033B:  MOVWF  04
033C:  BCF    03.7
033D:  BTFSC  4C.0
033E:  BSF    03.7
033F:  INCF   04,F
0340:  BTFSC  03.2
0341:  INCF   05,F
0342:  GOTO   32E
0343:  RETURN
0344:  MOVLW  20
0345:  BTFSS  4C.4
0346:  MOVLW  30
0347:  MOVWF  4D
0348:  MOVF   4B,W
0349:  MOVWF  77
034A:  BTFSS  4B.7
034B:  GOTO   354
034C:  COMF   77,F
034D:  INCF   77,F
034E:  MOVF   77,W
034F:  MOVWF  4B
0350:  MOVLW  2D
0351:  MOVWF  4D
0352:  BSF    4C.7
0353:  BSF    4C.0
0354:  MOVF   4B,W
0355:  MOVWF  51
0356:  MOVLW  64
0357:  MOVWF  52
0358:  CALL   2E4
0359:  MOVF   77,W
035A:  MOVWF  4B
035B:  MOVLW  30
035C:  ADDWF  78,W
035D:  MOVWF  4E
035E:  MOVF   4B,W
035F:  MOVWF  51
0360:  MOVLW  0A
0361:  MOVWF  52
0362:  CALL   2E4
0363:  MOVLW  30
0364:  ADDWF  77,W
0365:  MOVWF  50
0366:  MOVLW  30
0367:  ADDWF  78,W
0368:  MOVWF  4F
0369:  MOVF   4D,W
036A:  MOVWF  77
036B:  MOVLW  30
036C:  SUBWF  4E,W
036D:  BTFSC  03.2
036E:  GOTO   373
036F:  BSF    4C.1
0370:  BTFSC  4C.7
0371:  BSF    4C.2
0372:  GOTO   387
0373:  MOVF   4D,W
0374:  MOVWF  4E
0375:  MOVLW  20
0376:  MOVWF  4D
0377:  MOVLW  30
0378:  SUBWF  4F,W
0379:  BTFSC  03.2
037A:  GOTO   37F
037B:  BSF    4C.0
037C:  BTFSC  4C.7
037D:  BSF    4C.1
037E:  GOTO   387
037F:  BTFSS  03.2
0380:  BSF    4C.0
0381:  BTFSS  03.2
0382:  GOTO   387
0383:  MOVF   4E,W
0384:  MOVWF  4F
0385:  MOVLW  20
0386:  MOVWF  4E
0387:  BTFSC  4C.2
0388:  GOTO   38E
0389:  BTFSC  4C.1
038A:  GOTO   391
038B:  BTFSC  4C.0
038C:  GOTO   394
038D:  GOTO   397
038E:  MOVF   4D,W
038F:  MOVWF  51
0390:  CALL   1FE
0391:  MOVF   4E,W
0392:  MOVWF  51
0393:  CALL   1FE
0394:  MOVF   4F,W
0395:  MOVWF  51
0396:  CALL   1FE
0397:  MOVF   50,W
0398:  MOVWF  51
0399:  CALL   1FE
039A:  RETURN
*
03A6:  MOVF   0B,W
03A7:  MOVWF  4C
03A8:  BCF    0B.7
03A9:  BSF    03.5
03AA:  BSF    03.6
03AB:  BSF    0C.7
03AC:  BSF    0C.0
03AD:  NOP
03AE:  NOP
03AF:  BCF    03.5
03B0:  BCF    03.6
03B1:  BTFSC  4C.7
03B2:  BSF    0B.7
03B3:  BTFSC  03.0
03B4:  GOTO   3DD
03B5:  BSF    03.6
03B6:  MOVF   0C,W
03B7:  ANDLW  7F
03B8:  BCF    03.6
03B9:  MOVWF  4C
03BA:  BSF    03.6
03BB:  MOVF   0D,W
03BC:  BCF    03.6
03BD:  MOVWF  4D
03BE:  BSF    03.6
03BF:  MOVF   0F,W
03C0:  BCF    03.6
03C1:  MOVWF  4E
03C2:  MOVF   4C,W
03C3:  MOVWF  51
03C4:  CALL   1FE
03C5:  MOVF   4D,W
03C6:  BSF    03.6
03C7:  MOVWF  0D
03C8:  BCF    03.6
03C9:  MOVF   4E,W
03CA:  BSF    03.6
03CB:  MOVWF  0F
03CC:  BCF    03.6
03CD:  MOVF   0B,W
03CE:  MOVWF  4F
03CF:  BCF    0B.7
03D0:  BSF    03.5
03D1:  BSF    03.6
03D2:  BSF    0C.7
03D3:  BSF    0C.0
03D4:  NOP
03D5:  NOP
03D6:  BCF    03.5
03D7:  BCF    03.6
03D8:  BTFSC  4F.7
03D9:  BSF    0B.7
03DA:  DECFSZ 4B,F
03DB:  GOTO   3DD
03DC:  GOTO   3FC
03DD:  BSF    03.6
03DE:  RLF    0C,W
03DF:  RLF    0E,W
03E0:  ANDLW  7F
03E1:  BCF    03.6
03E2:  MOVWF  4C
03E3:  BSF    03.6
03E4:  MOVF   0D,W
03E5:  BCF    03.6
03E6:  MOVWF  4D
03E7:  BSF    03.6
03E8:  MOVF   0F,W
03E9:  BCF    03.6
03EA:  MOVWF  4E
03EB:  MOVF   4C,W
03EC:  MOVWF  51
03ED:  CALL   1FE
03EE:  MOVF   4D,W
03EF:  BSF    03.6
03F0:  MOVWF  0D
03F1:  BCF    03.6
03F2:  MOVF   4E,W
03F3:  BSF    03.6
03F4:  MOVWF  0F
03F5:  INCF   0D,F
03F6:  BTFSC  03.2
03F7:  INCF   0F,F
03F8:  BCF    03.0
03F9:  BCF    03.6
03FA:  DECFSZ 4B,F
03FB:  GOTO   3A6
03FC:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=16
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... 
.................... #use delay(crystal=20000000)
.................... #include <lcd.h>
.................... #define _lcd_h_
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #use delay(clock=20000000)
*
00D7:  MOVLW  52
00D8:  MOVWF  04
00D9:  BCF    03.7
00DA:  MOVF   00,W
00DB:  BTFSC  03.2
00DC:  GOTO   0EA
00DD:  MOVLW  06
00DE:  MOVWF  78
00DF:  CLRF   77
00E0:  DECFSZ 77,F
00E1:  GOTO   0E0
00E2:  DECFSZ 78,F
00E3:  GOTO   0DF
00E4:  MOVLW  7B
00E5:  MOVWF  77
00E6:  DECFSZ 77,F
00E7:  GOTO   0E6
00E8:  DECFSZ 00,F
00E9:  GOTO   0DD
00EA:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD.
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD.
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... void lcd_clear(void);
.................... void lcd_line_1(void);
.................... void lcd_line_2(void);
.................... void lcd_line_3(void);
.................... void lcd_line_4(void);
.................... // Khai bao bien.
.................... // Dinh nghia cac thong so.
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN         PIN_D2
.................... #define LCD_ENABLE_PIN     PIN_D3
.................... #define LCD_DATA4          PIN_D4
.................... #define LCD_DATA5          PIN_D5
.................... #define LCD_DATA6          PIN_D6
.................... #define LCD_DATA7          PIN_D7 
.................... 
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_C1
.................... //!#define LCD_ENABLE_PIN     PIN_C2
.................... //!#define LCD_DATA4          PIN_C3
.................... //!#define LCD_DATA5          PIN_C4
.................... //!#define LCD_DATA6          PIN_C5
.................... //!#define LCD_DATA7          PIN_C6
.................... 
.................... /*
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN      PIN_D2
.................... #define LCD_ENABLE_PIN  PIN_D3
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7  
.................... */
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN.
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN)
.................... 
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN.
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN)
.................... 
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN)
.................... 
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1.
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2.
.................... #define lcd_line_three   0x14
.................... #define lcd_line_four   0x54
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines
.................... 
.................... // Dinh nghia cac hang so.
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06};
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD.
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F).
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font).
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7.
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10.
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7.
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro).
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink).
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong.
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi).
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift).
....................       // Byte 5: .... - Doi con tro / hien thi.
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left).
.................... 
.................... // ***************************************************
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte i;
.................... // Dinh nghia ham.
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra.
*
01A1:  BSF    03.5
01A2:  BCF    08.4
.................... output_drive(LCD_DATA5);
01A3:  BCF    08.5
.................... output_drive(LCD_DATA6);
01A4:  BCF    08.6
.................... output_drive(LCD_DATA7);
01A5:  BCF    08.7
.................... 
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra.
01A6:  BCF    08.3
.................... lcd_rs_tris();
01A7:  BCF    08.1
.................... lcd_rw_tris();
01A8:  BCF    08.2
.................... 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
01A9:  BCF    03.5
01AA:  BCF    08.1
01AB:  BSF    03.5
01AC:  BCF    08.1
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD.
01AD:  BCF    03.5
01AE:  BCF    08.2
01AF:  BSF    03.5
01B0:  BCF    08.2
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
01B1:  BCF    03.5
01B2:  BCF    08.3
01B3:  BSF    03.5
01B4:  BCF    08.3
.................... 
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon).
01B5:  MOVLW  0F
01B6:  BCF    03.5
01B7:  MOVWF  52
01B8:  CALL   0D7
.................... 
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep
01B9:  MOVLW  01
01BA:  MOVWF  4B
01BB:  MOVF   4B,W
01BC:  SUBLW  03
01BD:  BTFSS  03.0
01BE:  GOTO   1C7
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong 
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham).
01BF:  MOVLW  03
01C0:  MOVWF  59
01C1:  CALL   0EB
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit).
01C2:  MOVLW  05
01C3:  MOVWF  52
01C4:  CALL   0D7
01C5:  INCF   4B,F
01C6:  GOTO   1BB
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai 
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat).
.................... 
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi
01C7:  MOVLW  02
01C8:  MOVWF  59
01C9:  CALL   0EB
....................                      // ra truoc tien, sau do la 4 bit thap.
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit).
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay.
.................... 
.................... for(i=0;i<=3;i++)
01CA:  CLRF   4B
01CB:  MOVF   4B,W
01CC:  SUBLW  03
01CD:  BTFSS  03.0
01CE:  GOTO   1D8
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD.
01CF:  MOVF   4B,W
01D0:  CALL   04F
01D1:  MOVWF  4C
01D2:  CLRF   56
01D3:  MOVF   4C,W
01D4:  MOVWF  57
01D5:  CALL   14A
01D6:  INCF   4B,F
01D7:  GOTO   1CB
01D8:  BCF    0A.3
01D9:  BCF    0A.4
01DA:  GOTO   415 (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD.
.................... 
.................... // ***************************************************
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte low,high;
.................... // Dinh nghia ham.
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao.
*
014D:  BSF    08.4
.................... output_float(LCD_DATA5);
014E:  BSF    08.5
.................... output_float(LCD_DATA6);
014F:  BSF    08.6
.................... output_float(LCD_DATA7);
0150:  BSF    08.7
.................... 
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD.
0151:  BCF    03.5
0152:  BSF    08.2
0153:  BSF    03.5
0154:  BCF    08.2
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0155:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
0156:  BCF    03.5
0157:  BSF    08.3
0158:  BSF    03.5
0159:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
015A:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao).
015B:  BCF    03.5
015C:  CALL   119
015D:  MOVF   78,W
015E:  MOVWF  59
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
015F:  BCF    08.3
0160:  BSF    03.5
0161:  BCF    08.3
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0162:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
0163:  BCF    03.5
0164:  BSF    08.3
0165:  BSF    03.5
0166:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0167:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap).
0168:  BCF    03.5
0169:  CALL   119
016A:  MOVF   78,W
016B:  MOVWF  58
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
016C:  BCF    08.3
016D:  BSF    03.5
016E:  BCF    08.3
.................... 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra.
016F:  BCF    08.4
.................... output_drive(LCD_DATA5);
0170:  BCF    08.5
.................... output_drive(LCD_DATA6);
0171:  BCF    08.6
.................... output_drive(LCD_DATA7);
0172:  BCF    08.7
.................... 
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit).
0173:  BCF    03.5
0174:  SWAPF  59,W
0175:  MOVWF  77
0176:  MOVLW  F0
0177:  ANDWF  77,F
0178:  MOVF   77,W
0179:  IORWF  58,W
017A:  MOVWF  78
.................... }
.................... 
.................... // ***************************************************
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
*
0119:  CLRF   5A
.................... {
.................... // Khai bao bien.
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin.
.................... // Dinh nghia ham.
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu.
011A:  BSF    03.5
011B:  BSF    08.4
011C:  MOVLW  00
011D:  BCF    03.5
011E:  BTFSC  08.4
011F:  MOVLW  01
0120:  IORWF  5A,F
.................... n |= input(LCD_DATA5) << 1;
0121:  BSF    03.5
0122:  BSF    08.5
0123:  MOVLW  00
0124:  BCF    03.5
0125:  BTFSC  08.5
0126:  MOVLW  01
0127:  MOVWF  77
0128:  BCF    03.0
0129:  RLF    77,F
012A:  MOVF   77,W
012B:  IORWF  5A,F
.................... n |= input(LCD_DATA6) << 2;
012C:  BSF    03.5
012D:  BSF    08.6
012E:  MOVLW  00
012F:  BCF    03.5
0130:  BTFSC  08.6
0131:  MOVLW  01
0132:  MOVWF  77
0133:  RLF    77,F
0134:  RLF    77,F
0135:  MOVLW  FC
0136:  ANDWF  77,F
0137:  MOVF   77,W
0138:  IORWF  5A,F
.................... n |= input(LCD_DATA7) << 3;
0139:  BSF    03.5
013A:  BSF    08.7
013B:  MOVLW  00
013C:  BCF    03.5
013D:  BTFSC  08.7
013E:  MOVLW  01
013F:  MOVWF  77
0140:  RLF    77,F
0141:  RLF    77,F
0142:  RLF    77,F
0143:  MOVLW  F8
0144:  ANDWF  77,F
0145:  MOVF   77,W
0146:  IORWF  5A,F
.................... 
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx).
0147:  MOVF   5A,W
0148:  MOVWF  78
0149:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... {                                 // address = 0: Lenh / 1: Du lieu.
....................                                  // byte = Thong tin can gui (8 bit).
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham.  
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh.
014A:  BCF    08.1
014B:  BSF    03.5
014C:  BCF    08.1
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
*
017B:  MOVF   78,W
017C:  MOVWF  58
017D:  BTFSS  58.7
017E:  GOTO   181
017F:  BSF    03.5
0180:  GOTO   14D
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu.
0181:  MOVF   56,F
0182:  BTFSS  03.2
0183:  GOTO   186
0184:  BCF    08.1
0185:  GOTO   187
0186:  BSF    08.1
0187:  BSF    03.5
0188:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0189:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD.
018A:  BCF    03.5
018B:  BCF    08.2
018C:  BSF    03.5
018D:  BCF    08.2
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
018E:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD.
018F:  BCF    03.5
0190:  BCF    08.3
0191:  BSF    03.5
0192:  BCF    08.3
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD.
0193:  BCF    03.5
0194:  SWAPF  57,W
0195:  MOVWF  58
0196:  MOVLW  0F
0197:  ANDWF  58,F
0198:  MOVF   58,W
0199:  MOVWF  59
019A:  CALL   0EB
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD.
019B:  MOVF   57,W
019C:  ANDLW  0F
019D:  MOVWF  58
019E:  MOVWF  59
019F:  CALL   0EB
01A0:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap.
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu.
*
00EB:  BTFSC  59.0
00EC:  GOTO   0EF
00ED:  BCF    08.4
00EE:  GOTO   0F0
00EF:  BSF    08.4
00F0:  BSF    03.5
00F1:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1));
00F2:  BCF    03.5
00F3:  BTFSC  59.1
00F4:  GOTO   0F7
00F5:  BCF    08.5
00F6:  GOTO   0F8
00F7:  BSF    08.5
00F8:  BSF    03.5
00F9:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2));
00FA:  BCF    03.5
00FB:  BTFSC  59.2
00FC:  GOTO   0FF
00FD:  BCF    08.6
00FE:  GOTO   100
00FF:  BSF    08.6
0100:  BSF    03.5
0101:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3));
0102:  BCF    03.5
0103:  BTFSC  59.3
0104:  GOTO   107
0105:  BCF    08.7
0106:  GOTO   108
0107:  BSF    08.7
0108:  BSF    03.5
0109:  BCF    08.7
....................     
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
010A:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD.
010B:  BCF    03.5
010C:  BSF    08.3
010D:  BSF    03.5
010E:  BCF    08.3
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz).
010F:  MOVLW  03
0110:  MOVWF  77
0111:  DECFSZ 77,F
0112:  GOTO   111
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low).
0113:  BCF    03.5
0114:  BCF    08.3
0115:  BSF    03.5
0116:  BCF    08.3
0117:  BCF    03.5
0118:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1).
.................... {
.................... // Khai bao bien.
.................... byte address;
.................... // Dinh nghia ham.  
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2.
*
01DB:  DECFSZ 53,W
01DC:  GOTO   1DF
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2. 
01DD:  CLRF   54
01DE:  GOTO   1F3
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1.
01DF:  MOVF   53,W
01E0:  SUBLW  02
01E1:  BTFSS  03.2
01E2:  GOTO   1E6
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1.
01E3:  MOVLW  40
01E4:  MOVWF  54
01E5:  GOTO   1F3
.................... else if(y==3)
01E6:  MOVF   53,W
01E7:  SUBLW  03
01E8:  BTFSS  03.2
01E9:  GOTO   1ED
....................    address=lcd_line_three;     
01EA:  MOVLW  14
01EB:  MOVWF  54
01EC:  GOTO   1F3
.................... else if(y==4)
01ED:  MOVF   53,W
01EE:  SUBLW  04
01EF:  BTFSS  03.2
01F0:  GOTO   1F3
....................    address=lcd_line_four;   
01F1:  MOVLW  54
01F2:  MOVWF  54
.................... 
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).      
01F3:  MOVLW  01
01F4:  SUBWF  52,W
01F5:  ADDWF  54,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0.
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD.
01F6:  MOVF   54,W
01F7:  IORLW  80
01F8:  MOVWF  55
01F9:  CLRF   56
01FA:  MOVF   55,W
01FB:  MOVWF  57
01FC:  CALL   14A
01FD:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).   
.................... 
.................... // ***************************************************
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... char value;
.................... // Dinh nghia ham.  
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat.
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu.
.................... value = lcd_read_byte();   // Doc ve tu C.LCD.
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
.................... 
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau.
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... switch (c)
01FE:  MOVF   51,W
01FF:  XORLW  0C
0200:  BTFSC  03.2
0201:  GOTO   209
0202:  XORLW  06
0203:  BTFSC  03.2
0204:  GOTO   211
0205:  XORLW  02
0206:  BTFSC  03.2
0207:  GOTO   217
0208:  GOTO   21C
....................    {
....................    case '\f':     // Chuc nang xoa hien thi.
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD.
0209:  CLRF   56
020A:  MOVLW  01
020B:  MOVWF  57
020C:  CALL   14A
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01).
020D:  MOVLW  02
020E:  MOVWF  52
020F:  CALL   0D7
....................       break;
0210:  GOTO   221
....................    case '\n':       // Chuc nang bat dau hang thu 2.
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.   
0211:  MOVLW  01
0212:  MOVWF  52
0213:  MOVLW  02
0214:  MOVWF  53
0215:  CALL   1DB
....................       break;
0216:  GOTO   221
....................     case '\b':       // Chuc nang lui ve 1 vi tri.
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD. 
0217:  CLRF   56
0218:  MOVLW  10
0219:  MOVWF  57
021A:  CALL   14A
....................       break;               // Lenh: Doi con tro sang trai (0x10).
021B:  GOTO   221
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD.
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD.
021C:  MOVLW  01
021D:  MOVWF  56
021E:  MOVF   51,W
021F:  MOVWF  57
0220:  CALL   14A
....................       break;
....................    }
0221:  RETURN
.................... }      
.................... // ***************************************************   
.................... void lcd_clear(void)
.................... {
....................    lcd_gotoxy(1,1);
*
0278:  MOVLW  01
0279:  MOVWF  52
027A:  MOVWF  53
027B:  CALL   1DB
....................    lcd_putc('\f');
027C:  MOVLW  0C
027D:  MOVWF  51
027E:  CALL   1FE
027F:  RETURN
.................... }
.................... 
.................... void lcd_line_1(void)
.................... {
....................    lcd_gotoxy(1,1);
*
039B:  MOVLW  01
039C:  MOVWF  52
039D:  MOVWF  53
039E:  CALL   1DB
039F:  RETURN
.................... }
.................... 
.................... void lcd_line_2(void)
.................... {
....................    lcd_gotoxy(1,2);
03A0:  MOVLW  01
03A1:  MOVWF  52
03A2:  MOVLW  02
03A3:  MOVWF  53
03A4:  CALL   1DB
03A5:  RETURN
.................... }
.................... 
.................... void lcd_line_3(void)
.................... {
....................    lcd_gotoxy(1,3);
.................... }
.................... 
.................... void lcd_line_4(void)
.................... {
....................    lcd_gotoxy(1,4);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #include<DHT11.H>
.................... #define _DHT11_H_
.................... 
.................... #use delay(crystal=20000000)
*
0057:  MOVLW  5F
0058:  MOVWF  04
0059:  BCF    03.7
005A:  MOVF   00,W
005B:  BTFSC  03.2
005C:  GOTO   06A
005D:  MOVLW  06
005E:  MOVWF  78
005F:  CLRF   77
0060:  DECFSZ 77,F
0061:  GOTO   060
0062:  DECFSZ 78,F
0063:  GOTO   05F
0064:  MOVLW  7B
0065:  MOVWF  77
0066:  DECFSZ 77,F
0067:  GOTO   066
0068:  DECFSZ 00,F
0069:  GOTO   05D
006A:  RETURN
.................... 
.................... #BIT  DHT_DATA_OUT =  0x06.0
.................... #BIT  DHT_DATA_IN  =  0x06.0
.................... #BIT  DHT_DDR_DATA =  0x86.0
.................... 
.................... #define DHT_ER       0
.................... #define DHT_OK       1
.................... 
.................... #define DDROUT    0
.................... #define DDRIN     1
.................... 
.................... unsigned int8 DHT_GetTemHumi (unsigned int8 &tem1,&tem2,unsigned int8 &humi1,&humi2);
.................... 
.................... unsigned int8 DHT_GetTemHumi (unsigned int8 &tem1,&tem2,unsigned int8 &humi1,&humi2)
.................... {
....................    unsigned int8 buffer[5]={0,0,0,0,0};
*
045E:  CLRF   4B
045F:  CLRF   4C
0460:  CLRF   4D
0461:  CLRF   4E
0462:  CLRF   4F
....................    unsigned int8 ii,i,checksum;
....................    
....................    DHT_DDR_DATA=DDROUT;   // set la cong ra
0463:  BSF    03.5
0464:  BCF    06.0
....................    DHT_DATA_OUT=1;
0465:  BCF    03.5
0466:  BSF    06.0
....................    delay_us(60);
0467:  MOVLW  63
0468:  MOVWF  77
0469:  DECFSZ 77,F
046A:  GOTO   469
046B:  GOTO   46C
....................    DHT_DATA_OUT=0;
046C:  BCF    06.0
046D:  CLRF   2B
046E:  BTFSC  0B.7
046F:  BSF    2B.7
0470:  BCF    0B.7
....................    delay_ms(25); // it nhat 18ms
0471:  MOVLW  19
0472:  MOVWF  5F
0473:  CALL   057
0474:  BTFSC  2B.7
0475:  BSF    0B.7
....................    DHT_DATA_OUT=1;    
0476:  BSF    06.0
....................    DHT_DDR_DATA=DDRIN;//set la cong vao
0477:  BSF    03.5
0478:  BSF    06.0
....................    delay_us(60);
0479:  MOVLW  63
047A:  MOVWF  77
047B:  DECFSZ 77,F
047C:  GOTO   47B
047D:  GOTO   47E
....................    if(DHT_DATA_IN)return DHT_ER ;
047E:  BCF    03.5
047F:  BTFSS  06.0
0480:  GOTO   485
0481:  MOVLW  00
0482:  MOVWF  78
0483:  GOTO   4D5
0484:  GOTO   487
....................    else while(!(DHT_DATA_IN));   //Doi DaTa len 1
0485:  BTFSS  06.0
0486:  GOTO   485
....................    delay_us(60);//cho 60us
0487:  MOVLW  63
0488:  MOVWF  77
0489:  DECFSZ 77,F
048A:  GOTO   489
048B:  GOTO   48C
....................    if(!DHT_DATA_IN)return DHT_ER;
048C:  BTFSC  06.0
048D:  GOTO   492
048E:  MOVLW  00
048F:  MOVWF  78
0490:  GOTO   4D5
0491:  GOTO   494
....................    else while((DHT_DATA_IN));    //Doi Data ve 0
0492:  BTFSC  06.0
0493:  GOTO   492
....................    //Bat dau doc du lieu
....................    for(i=0;i<5;i++)
0494:  CLRF   51
0495:  MOVF   51,W
0496:  SUBLW  04
0497:  BTFSS  03.0
0498:  GOTO   4BF
....................    {
....................       for(ii=0;ii<8;ii++)
0499:  CLRF   50
049A:  MOVF   50,W
049B:  SUBLW  07
049C:  BTFSS  03.0
049D:  GOTO   4BD
....................       {   
....................          while((!DHT_DATA_IN));//Doi Data len 1
049E:  BTFSS  06.0
049F:  GOTO   49E
....................          delay_us(50);
04A0:  MOVLW  53
04A1:  MOVWF  77
04A2:  DECFSZ 77,F
04A3:  GOTO   4A2
....................          if(DHT_DATA_IN)
04A4:  BTFSS  06.0
04A5:  GOTO   4BB
....................          {
....................             buffer[i]|=(1<<(7-ii));
04A6:  MOVLW  4B
04A7:  ADDWF  51,W
04A8:  MOVWF  04
04A9:  BCF    03.7
04AA:  MOVF   50,W
04AB:  SUBLW  07
04AC:  MOVWF  78
04AD:  MOVLW  01
04AE:  MOVWF  77
04AF:  MOVF   78,F
04B0:  BTFSC  03.2
04B1:  GOTO   4B6
04B2:  BCF    03.0
04B3:  RLF    77,F
04B4:  DECFSZ 78,F
04B5:  GOTO   4B2
04B6:  MOVF   77,W
04B7:  IORWF  00,W
04B8:  MOVWF  00
....................             while((DHT_DATA_IN));//Doi Data xuong 0
04B9:  BTFSC  06.0
04BA:  GOTO   4B9
....................          }
04BB:  INCF   50,F
04BC:  GOTO   49A
....................       }
04BD:  INCF   51,F
04BE:  GOTO   495
....................    }
....................    checksum=buffer[0]+buffer[1]+buffer[2]+buffer[3];
04BF:  MOVF   4C,W
04C0:  ADDWF  4B,W
04C1:  ADDWF  4D,W
04C2:  ADDWF  4E,W
04C3:  MOVWF  52
....................    if((checksum)!=buffer[4])return DHT_ER;
04C4:  MOVF   4F,W
04C5:  SUBWF  52,W
04C6:  BTFSC  03.2
04C7:  GOTO   4CB
04C8:  MOVLW  00
04C9:  MOVWF  78
04CA:  GOTO   4D5
....................    tem1  =   buffer[2];//gia tri phan nguyen
04CB:  MOVF   4D,W
04CC:  MOVWF  33
....................    tem2  =   buffer[3];//gia tri phan thap phan
04CD:  MOVF   4E,W
04CE:  MOVWF  34
....................    humi1 =   buffer[0];//gia tri phan nguyen
04CF:  MOVF   4B,W
04D0:  MOVWF  35
....................    humi2 =   buffer[1];//gia tri phan thap phan
04D1:  MOVF   4C,W
04D2:  MOVWF  36
....................    return DHT_OK;
04D3:  MOVLW  01
04D4:  MOVWF  78
.................... }
.................... 
.................... 
.................... //khai bao ket noi cac nut nhan
.................... #define MENU      input(PIN_B7)
.................... #define TANG      input(PIN_A0)
.................... #define GIAM      input(PIN_A1)
.................... 
.................... //khai bao ket dieu khien cac tai
.................... #define TAI_1     PIN_E0
.................... #define TAI_2     PIN_E1
.................... 
.................... //!#define Line_1    lcd_line_1()
.................... //!#define Line_2    lcd_line_2()
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //!#include <lcd.c>
.................... //-----------------------------------------------------------------------------
.................... 
.................... char Option=0;
.................... unsigned int8 NhietDoMax=30,NhietDoMin=25,DoAmMax=65,DoAmMin=60; // cai dat min max cho nhiet do, do am
.................... //-----------------------------------------------------------------------------
.................... //!#define led PIN_C2
.................... #INT_RB
.................... void _NgatRB(void)
.................... {
....................    if(MENU==0)
*
006B:  BSF    03.5
006C:  BSF    06.7
006D:  BCF    03.5
006E:  BTFSC  06.7
006F:  GOTO   07D
....................    {
....................       delay_ms(300);
0070:  MOVLW  02
0071:  MOVWF  5E
0072:  MOVLW  96
0073:  MOVWF  5F
0074:  CALL   057
0075:  DECFSZ 5E,F
0076:  GOTO   072
....................       //while(MENU==0);
....................       //output_bit(TAI_1,1);
....................       Option=Option+1;
0077:  MOVLW  01
0078:  ADDWF  2C,F
....................       if(Option>4)
0079:  MOVF   2C,W
007A:  SUBLW  04
007B:  BTFSS  03.0
....................       {
....................          Option=0;
007C:  CLRF   2C
....................       }
....................    }
007D:  BCF    0B.0
007E:  BCF    0A.3
007F:  BCF    0A.4
0080:  GOTO   02B
.................... }
.................... //-----------------------------------------------------------------------------
.................... //-----------------------------------------------------------------------------
.................... void main()
*
03FD:  MOVF   03,W
03FE:  ANDLW  1F
03FF:  MOVWF  03
0400:  CLRF   2C
0401:  MOVLW  1E
0402:  MOVWF  2D
0403:  MOVLW  19
0404:  MOVWF  2E
0405:  MOVLW  41
0406:  MOVWF  2F
0407:  MOVLW  3C
0408:  MOVWF  30
0409:  CLRF   32
040A:  CLRF   31
040B:  BSF    03.5
040C:  BSF    1F.0
040D:  BSF    1F.1
040E:  BSF    1F.2
040F:  BCF    1F.3
0410:  MOVLW  07
0411:  MOVWF  1C
0412:  BCF    03.7
.................... {
....................    
....................    
....................    //khai bao bien cuc bo o day
....................    unsigned int8 dh_nhiet_do,dh_nhiet_do2,dh_do_am,dh_do_am2;
....................    unsigned int8 str[20];
....................    
....................    lcd_init();
0413:  BCF    03.5
0414:  GOTO   1A1
....................    lcd_putc('\f');
0415:  MOVLW  0C
0416:  MOVWF  51
0417:  CALL   1FE
....................    port_b_pullups(1);
0418:  BSF    03.5
0419:  BCF    01.7
....................    enable_interrupts(INT_RB);
041A:  BCF    03.5
041B:  BSF    0B.3
....................    enable_interrupts(GLOBAL);
041C:  MOVLW  C0
041D:  IORWF  0B,F
....................    output_bit(TAI_1,0);
041E:  BCF    09.0
041F:  BSF    03.5
0420:  BCF    09.0
....................    output_bit(TAI_2,0);
0421:  BCF    03.5
0422:  BCF    09.1
0423:  BSF    03.5
0424:  BCF    09.1
....................    
....................    lcd_gotoxy(5,1);
0425:  MOVLW  05
0426:  BCF    03.5
0427:  MOVWF  52
0428:  MOVLW  01
0429:  MOVWF  53
042A:  CALL   1DB
....................    printf(lcd_putc,"DO AN 3");
042B:  MOVLW  81
042C:  BSF    03.6
042D:  MOVWF  0D
042E:  MOVLW  00
042F:  MOVWF  0F
0430:  BCF    03.6
0431:  CALL   222
....................    lcd_gotoxy(2,2);
0432:  MOVLW  02
0433:  MOVWF  52
0434:  MOVWF  53
0435:  CALL   1DB
....................    printf(lcd_putc,"NGUYENMINHDOANH");
0436:  MOVLW  85
0437:  BSF    03.6
0438:  MOVWF  0D
0439:  MOVLW  00
043A:  MOVWF  0F
043B:  BCF    03.6
043C:  CALL   222
....................    delay_ms(2000);
043D:  MOVLW  08
043E:  MOVWF  4B
043F:  CLRF   2B
0440:  BTFSC  0B.7
0441:  BSF    2B.7
0442:  BCF    0B.7
0443:  MOVLW  FA
0444:  MOVWF  5F
0445:  CALL   057
0446:  BTFSC  2B.7
0447:  BSF    0B.7
0448:  DECFSZ 4B,F
0449:  GOTO   43F
....................    delay_ms(1000);
044A:  MOVLW  04
044B:  MOVWF  4B
044C:  CLRF   2B
044D:  BTFSC  0B.7
044E:  BSF    2B.7
044F:  BCF    0B.7
0450:  MOVLW  FA
0451:  MOVWF  5F
0452:  CALL   057
0453:  BTFSC  2B.7
0454:  BSF    0B.7
0455:  DECFSZ 4B,F
0456:  GOTO   44C
....................    lcd_putc('\f');   
0457:  MOVLW  0C
0458:  MOVWF  51
0459:  CALL   1FE
.................... 
....................    while(TRUE)
....................    {
.................... //!   output_low(led);
.................... //!   delay_ms(200);
.................... //!   output_high(led);
....................       //TODO: User Code
....................       
....................       lcd_clear();
045A:  CALL   278
....................       while(Option==0)
045B:  MOVF   2C,F
045C:  BTFSS  03.2
045D:  GOTO   587
....................       {
....................       // xuat tin hieu ra man hinh LCD
....................          if(DHT_GetTemHumi(dh_nhiet_do,dh_nhiet_do2,dh_do_am,dh_do_am2))
*
04D5:  MOVF   78,F
04D6:  BTFSC  03.2
04D7:  GOTO   54A
....................          {
....................             sprintf(str,"HU: %u,%u",dh_do_am,dh_do_am2);         
04D8:  CLRF   32
04D9:  MOVLW  37
04DA:  MOVWF  31
04DB:  MOVLW  8D
04DC:  BSF    03.6
04DD:  MOVWF  0D
04DE:  MOVLW  00
04DF:  MOVWF  0F
04E0:  BCF    03.0
04E1:  MOVLW  04
04E2:  BCF    03.6
04E3:  MOVWF  4B
04E4:  CALL   28D
04E5:  MOVF   35,W
04E6:  MOVWF  4B
04E7:  MOVLW  1B
04E8:  MOVWF  4C
04E9:  CALL   2F9
04EA:  MOVLW  2C
04EB:  MOVWF  4F
04EC:  CALL   280
04ED:  MOVF   36,W
04EE:  MOVWF  4B
04EF:  MOVLW  1B
04F0:  MOVWF  4C
04F1:  CALL   2F9
....................             lcd_gotoxy(1,1);
04F2:  MOVLW  01
04F3:  MOVWF  52
04F4:  MOVWF  53
04F5:  CALL   1DB
....................             printf(lcd_putc,"%s",str);   
04F6:  MOVLW  37
04F7:  MOVWF  04
04F8:  BCF    03.7
04F9:  CALL   32E
....................             lcd_putc('%');
04FA:  MOVLW  25
04FB:  MOVWF  51
04FC:  CALL   1FE
....................             printf(lcd_putc," %d-%d",DoAmMin,DoAmMax);
04FD:  MOVLW  20
04FE:  MOVWF  51
04FF:  CALL   1FE
0500:  MOVF   30,W
0501:  MOVWF  4B
0502:  MOVLW  18
0503:  MOVWF  4C
0504:  CALL   344
0505:  MOVLW  2D
0506:  MOVWF  51
0507:  CALL   1FE
0508:  MOVF   2F,W
0509:  MOVWF  4B
050A:  MOVLW  18
050B:  MOVWF  4C
050C:  CALL   344
....................             lcd_putc('%');
050D:  MOVLW  25
050E:  MOVWF  51
050F:  CALL   1FE
....................             sprintf(str,"TE: %u,%u",dh_nhiet_do,dh_nhiet_do2);
0510:  CLRF   32
0511:  MOVLW  37
0512:  MOVWF  31
0513:  MOVLW  92
0514:  BSF    03.6
0515:  MOVWF  0D
0516:  MOVLW  00
0517:  MOVWF  0F
0518:  BCF    03.0
0519:  MOVLW  04
051A:  BCF    03.6
051B:  MOVWF  4B
051C:  CALL   28D
051D:  MOVF   33,W
051E:  MOVWF  4B
051F:  MOVLW  1B
0520:  MOVWF  4C
0521:  CALL   2F9
0522:  MOVLW  2C
0523:  MOVWF  4F
0524:  CALL   280
0525:  MOVF   34,W
0526:  MOVWF  4B
0527:  MOVLW  1B
0528:  MOVWF  4C
0529:  CALL   2F9
....................             lcd_gotoxy(1,2);
052A:  MOVLW  01
052B:  MOVWF  52
052C:  MOVLW  02
052D:  MOVWF  53
052E:  CALL   1DB
....................             printf(lcd_putc,"%s",str);         
052F:  MOVLW  37
0530:  MOVWF  04
0531:  BCF    03.7
0532:  CALL   32E
....................             lcd_putc(223);
0533:  MOVLW  DF
0534:  MOVWF  51
0535:  CALL   1FE
.................... //!            lcd_putc('C');
....................             printf(lcd_putc," %d-%d",NhietDoMin,NhietDoMax);
0536:  MOVLW  20
0537:  MOVWF  51
0538:  CALL   1FE
0539:  MOVF   2E,W
053A:  MOVWF  4B
053B:  MOVLW  18
053C:  MOVWF  4C
053D:  CALL   344
053E:  MOVLW  2D
053F:  MOVWF  51
0540:  CALL   1FE
0541:  MOVF   2D,W
0542:  MOVWF  4B
0543:  MOVLW  18
0544:  MOVWF  4C
0545:  CALL   344
....................             lcd_putc(223);
0546:  MOVLW  DF
0547:  MOVWF  51
0548:  CALL   1FE
.................... //!            lcd_putc('C');
....................          }
0549:  GOTO   555
....................          else {printf(lcd_putc,"K DOC DUOC GTRI");
054A:  MOVLW  97
054B:  BSF    03.6
054C:  MOVWF  0D
054D:  MOVLW  00
054E:  MOVWF  0F
054F:  BCF    03.6
0550:  CALL   222
....................                lcd_gotoxy(1,1);}
0551:  MOVLW  01
0552:  MOVWF  52
0553:  MOVWF  53
0554:  CALL   1DB
....................                
....................          if(dh_nhiet_do>=NhietDoMax && dh_do_am<=DoAmMin || dh_nhiet_do>=NhietDoMax && dh_do_am>=DoAmMax)
0555:  MOVF   2D,W
0556:  SUBWF  33,W
0557:  BTFSS  03.0
0558:  GOTO   55D
0559:  MOVF   35,W
055A:  SUBWF  30,W
055B:  BTFSC  03.0
055C:  GOTO   565
055D:  MOVF   2D,W
055E:  SUBWF  33,W
055F:  BTFSS  03.0
0560:  GOTO   56E
0561:  MOVF   2F,W
0562:  SUBWF  35,W
0563:  BTFSS  03.0
0564:  GOTO   56E
....................          {
....................             output_bit(TAI_1,1);
0565:  BSF    09.0
0566:  BSF    03.5
0567:  BCF    09.0
....................             output_bit(TAI_2,1);
0568:  BCF    03.5
0569:  BSF    09.1
056A:  BSF    03.5
056B:  BCF    09.1
....................          }
056C:  GOTO   585
056D:  BCF    03.5
....................          else if(dh_nhiet_do<=NhietDoMin && dh_do_am>=DoAmMax || dh_nhiet_do<=NhietDoMin && dh_do_am<=DoAmMax)
056E:  MOVF   33,W
056F:  SUBWF  2E,W
0570:  BTFSS  03.0
0571:  GOTO   576
0572:  MOVF   2F,W
0573:  SUBWF  35,W
0574:  BTFSC  03.0
0575:  GOTO   57E
0576:  MOVF   33,W
0577:  SUBWF  2E,W
0578:  BTFSS  03.0
0579:  GOTO   586
057A:  MOVF   35,W
057B:  SUBWF  2F,W
057C:  BTFSS  03.0
057D:  GOTO   586
....................          {
....................             output_bit(TAI_1,0);
057E:  BCF    09.0
057F:  BSF    03.5
0580:  BCF    09.0
....................             output_bit(TAI_2,0); 
0581:  BCF    03.5
0582:  BCF    09.1
0583:  BSF    03.5
0584:  BCF    09.1
0585:  BCF    03.5
....................          }
0586:  GOTO   45B
....................       }
....................       
....................       // Cai dat nhiet do max
....................       lcd_clear();
0587:  CALL   278
....................       while(Option==1)
0588:  DECFSZ 2C,W
0589:  GOTO   5CC
....................       {
....................          lcd_line_1();
058A:  CALL   39B
....................          printf(lcd_putc,"CAI DAT ND MAX");
058B:  MOVLW  9F
058C:  BSF    03.6
058D:  MOVWF  0D
058E:  MOVLW  00
058F:  MOVWF  0F
0590:  BCF    03.6
0591:  CALL   222
....................          lcd_line_2();
0592:  CALL   3A0
....................          printf(lcd_putc,"GIA TRI:%d",NhietDoMax);
0593:  MOVLW  A7
0594:  BSF    03.6
0595:  MOVWF  0D
0596:  MOVLW  00
0597:  MOVWF  0F
0598:  BCF    03.0
0599:  MOVLW  08
059A:  BCF    03.6
059B:  MOVWF  4B
059C:  CALL   3A6
059D:  MOVF   2D,W
059E:  MOVWF  4B
059F:  MOVLW  18
05A0:  MOVWF  4C
05A1:  CALL   344
....................          
....................          if(TANG==0)
05A2:  BSF    03.5
05A3:  BSF    05.0
05A4:  BCF    03.5
05A5:  BTFSC  05.0
05A6:  GOTO   5B5
....................          {
....................             while(TANG==0);
05A7:  BSF    03.5
05A8:  BSF    05.0
05A9:  BCF    03.5
05AA:  BTFSS  05.0
05AB:  GOTO   5A7
....................             NhietDoMax=NhietDoMax+1;
05AC:  MOVLW  01
05AD:  ADDWF  2D,F
....................             if(NhietDoMax>40 )
05AE:  MOVF   2D,W
05AF:  SUBLW  28
05B0:  BTFSC  03.0
05B1:  GOTO   5B4
....................             {
....................                NhietDoMax=30;
05B2:  MOVLW  1E
05B3:  MOVWF  2D
....................             }
....................          }
05B4:  GOTO   5CB
....................          else if(GIAM==0)
05B5:  BSF    03.5
05B6:  BSF    05.1
05B7:  BCF    03.5
05B8:  BTFSC  05.1
05B9:  GOTO   5CB
....................          {
....................             while(GIAM==0);
05BA:  BSF    03.5
05BB:  BSF    05.1
05BC:  BCF    03.5
05BD:  BTFSS  05.1
05BE:  GOTO   5BA
....................             NhietDoMax=NhietDoMax-1;
05BF:  MOVLW  01
05C0:  SUBWF  2D,F
....................             if(NhietDoMax<20 || NhietDoMax <= NhietDoMin)
05C1:  MOVF   2D,W
05C2:  SUBLW  13
05C3:  BTFSC  03.0
05C4:  GOTO   5C9
05C5:  MOVF   2D,W
05C6:  SUBWF  2E,W
05C7:  BTFSS  03.0
05C8:  GOTO   5CB
....................             {
....................                NhietDoMax=26;
05C9:  MOVLW  1A
05CA:  MOVWF  2D
....................             }
....................          }
05CB:  GOTO   588
....................       }
....................       
....................     // Cai dat nhiet do min
....................       lcd_clear();
05CC:  CALL   278
....................       while(Option==2)
05CD:  MOVF   2C,W
05CE:  SUBLW  02
05CF:  BTFSS  03.2
05D0:  GOTO   613
....................       {
....................          lcd_line_1();
05D1:  CALL   39B
....................          printf(lcd_putc,"CAI DAT ND MIN");
05D2:  MOVLW  AD
05D3:  BSF    03.6
05D4:  MOVWF  0D
05D5:  MOVLW  00
05D6:  MOVWF  0F
05D7:  BCF    03.6
05D8:  CALL   222
....................          lcd_line_2();
05D9:  CALL   3A0
....................          printf(lcd_putc,"GIA TRI:%d",NhietDoMin);
05DA:  MOVLW  B5
05DB:  BSF    03.6
05DC:  MOVWF  0D
05DD:  MOVLW  00
05DE:  MOVWF  0F
05DF:  BCF    03.0
05E0:  MOVLW  08
05E1:  BCF    03.6
05E2:  MOVWF  4B
05E3:  CALL   3A6
05E4:  MOVF   2E,W
05E5:  MOVWF  4B
05E6:  MOVLW  18
05E7:  MOVWF  4C
05E8:  CALL   344
....................          
....................          if(TANG==0)
05E9:  BSF    03.5
05EA:  BSF    05.0
05EB:  BCF    03.5
05EC:  BTFSC  05.0
05ED:  GOTO   600
....................          {
....................             while(TANG==0);
05EE:  BSF    03.5
05EF:  BSF    05.0
05F0:  BCF    03.5
05F1:  BTFSS  05.0
05F2:  GOTO   5EE
....................             NhietDoMin=NhietDoMin+1;
05F3:  MOVLW  01
05F4:  ADDWF  2E,F
....................             if(NhietDoMin>35 || NhietDoMin >= NhietDoMax)
05F5:  MOVF   2E,W
05F6:  SUBLW  23
05F7:  BTFSS  03.0
05F8:  GOTO   5FD
05F9:  MOVF   2D,W
05FA:  SUBWF  2E,W
05FB:  BTFSS  03.0
05FC:  GOTO   5FF
....................             {
....................                NhietDoMin=20;
05FD:  MOVLW  14
05FE:  MOVWF  2E
....................             }
....................          }
05FF:  GOTO   612
....................          else if(GIAM==0)
0600:  BSF    03.5
0601:  BSF    05.1
0602:  BCF    03.5
0603:  BTFSC  05.1
0604:  GOTO   612
....................          {
....................             while(GIAM==0);
0605:  BSF    03.5
0606:  BSF    05.1
0607:  BCF    03.5
0608:  BTFSS  05.1
0609:  GOTO   605
....................             NhietDoMin=NhietDoMin-1;
060A:  MOVLW  01
060B:  SUBWF  2E,F
....................             if(NhietDoMin<15)
060C:  MOVF   2E,W
060D:  SUBLW  0E
060E:  BTFSS  03.0
060F:  GOTO   612
....................             {
....................                NhietDoMin=20;
0610:  MOVLW  14
0611:  MOVWF  2E
....................             }
....................          }
0612:  GOTO   5CD
....................       }      
....................       // Cai dat do am max
....................       lcd_clear();
0613:  CALL   278
....................       while(Option==3)
0614:  MOVF   2C,W
0615:  SUBLW  03
0616:  BTFSS  03.2
0617:  GOTO   65D
....................       {
....................          lcd_line_1();
0618:  CALL   39B
....................          printf(lcd_putc,"CAI DAT HU MAX");
0619:  MOVLW  BB
061A:  BSF    03.6
061B:  MOVWF  0D
061C:  MOVLW  00
061D:  MOVWF  0F
061E:  BCF    03.6
061F:  CALL   222
....................          lcd_line_2();
0620:  CALL   3A0
....................          printf(lcd_putc,"GIA TRI:%d",DoAmMax);
0621:  MOVLW  C3
0622:  BSF    03.6
0623:  MOVWF  0D
0624:  MOVLW  00
0625:  MOVWF  0F
0626:  BCF    03.0
0627:  MOVLW  08
0628:  BCF    03.6
0629:  MOVWF  4B
062A:  CALL   3A6
062B:  MOVF   2F,W
062C:  MOVWF  4B
062D:  MOVLW  18
062E:  MOVWF  4C
062F:  CALL   344
....................          lcd_putc('%');
0630:  MOVLW  25
0631:  MOVWF  51
0632:  CALL   1FE
....................          
....................          if(TANG==0)
0633:  BSF    03.5
0634:  BSF    05.0
0635:  BCF    03.5
0636:  BTFSC  05.0
0637:  GOTO   646
....................          {
....................             while(TANG==0);
0638:  BSF    03.5
0639:  BSF    05.0
063A:  BCF    03.5
063B:  BTFSS  05.0
063C:  GOTO   638
....................             DoAmMax=DoAmMax+1;
063D:  MOVLW  01
063E:  ADDWF  2F,F
....................             if(DoAmMax>99)
063F:  MOVF   2F,W
0640:  SUBLW  63
0641:  BTFSC  03.0
0642:  GOTO   645
....................             {
....................                DoAmMax=70;
0643:  MOVLW  46
0644:  MOVWF  2F
....................             }
....................          }
0645:  GOTO   65C
....................          else if(GIAM==0)
0646:  BSF    03.5
0647:  BSF    05.1
0648:  BCF    03.5
0649:  BTFSC  05.1
064A:  GOTO   65C
....................          {
....................             while(GIAM==0);
064B:  BSF    03.5
064C:  BSF    05.1
064D:  BCF    03.5
064E:  BTFSS  05.1
064F:  GOTO   64B
....................             DoAmMax=DoAmMax-1;
0650:  MOVLW  01
0651:  SUBWF  2F,F
....................             if(DoAmMax<50 || DoAmMax <= DoAmMin)
0652:  MOVF   2F,W
0653:  SUBLW  31
0654:  BTFSC  03.0
0655:  GOTO   65A
0656:  MOVF   2F,W
0657:  SUBWF  30,W
0658:  BTFSS  03.0
0659:  GOTO   65C
....................             {
....................                DoAmMax=70;
065A:  MOVLW  46
065B:  MOVWF  2F
....................             }
....................          }
065C:  GOTO   614
....................       }          
....................       // Cai dat do am min
....................       lcd_clear();
065D:  CALL   278
....................       while(Option==4)
065E:  MOVF   2C,W
065F:  SUBLW  04
0660:  BTFSS  03.2
0661:  GOTO   6A7
....................       {
....................          lcd_line_1();
0662:  CALL   39B
....................          printf(lcd_putc,"CAI DAT HU MIN");
0663:  MOVLW  C9
0664:  BSF    03.6
0665:  MOVWF  0D
0666:  MOVLW  00
0667:  MOVWF  0F
0668:  BCF    03.6
0669:  CALL   222
....................          lcd_line_2();
066A:  CALL   3A0
....................          printf(lcd_putc,"GIA TRI:%d",DoAmMin);
066B:  MOVLW  D1
066C:  BSF    03.6
066D:  MOVWF  0D
066E:  MOVLW  00
066F:  MOVWF  0F
0670:  BCF    03.0
0671:  MOVLW  08
0672:  BCF    03.6
0673:  MOVWF  4B
0674:  CALL   3A6
0675:  MOVF   30,W
0676:  MOVWF  4B
0677:  MOVLW  18
0678:  MOVWF  4C
0679:  CALL   344
....................          lcd_putc('%');
067A:  MOVLW  25
067B:  MOVWF  51
067C:  CALL   1FE
....................          
....................          if(TANG==0)
067D:  BSF    03.5
067E:  BSF    05.0
067F:  BCF    03.5
0680:  BTFSC  05.0
0681:  GOTO   694
....................          {
....................             while(TANG==0);
0682:  BSF    03.5
0683:  BSF    05.0
0684:  BCF    03.5
0685:  BTFSS  05.0
0686:  GOTO   682
....................             DoAmMin=DoAmMin+1;
0687:  MOVLW  01
0688:  ADDWF  30,F
....................             if(DoAmMin>85 || DoAmMin >= DoAmMax)
0689:  MOVF   30,W
068A:  SUBLW  55
068B:  BTFSS  03.0
068C:  GOTO   691
068D:  MOVF   2F,W
068E:  SUBWF  30,W
068F:  BTFSS  03.0
0690:  GOTO   693
....................             {
....................                DoAmMin=55;
0691:  MOVLW  37
0692:  MOVWF  30
....................             }
....................          }
0693:  GOTO   6A6
....................          else if(GIAM==0)
0694:  BSF    03.5
0695:  BSF    05.1
0696:  BCF    03.5
0697:  BTFSC  05.1
0698:  GOTO   6A6
....................          {
....................             while(GIAM==0);
0699:  BSF    03.5
069A:  BSF    05.1
069B:  BCF    03.5
069C:  BTFSS  05.1
069D:  GOTO   699
....................             DoAmMin=DoAmMin-1;
069E:  MOVLW  01
069F:  SUBWF  30,F
....................             if(DoAmMin<40)
06A0:  MOVF   30,W
06A1:  SUBLW  27
06A2:  BTFSS  03.0
06A3:  GOTO   6A6
....................             {
....................                DoAmMin=55;
06A4:  MOVLW  37
06A5:  MOVWF  30
....................             }
....................          }
06A6:  GOTO   65E
....................       }       
06A7:  GOTO   45A
....................       
....................    }
.................... }
.................... //-----------------------------------------------------------------------------
06A8:  SLEEP
.................... //-----------------------------------------------------------------------------
.................... 

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
